
" enable syntax hightlight and completion
syntax on


" install Vundle bundles
if filereadable(expand("~/.vim/bundles.vim"))
  source ~/.vim/bundles.vim
endif

" enable filetype dectection and ft specific plugin/indent
filetype plugin indent on


"==========================================
" clipboard
"==========================================
set clipboard=unnamedplus	" yank to the system register (*) by default
" inoremap <S-Insert> <ESC>"+p`]a


"==========================================
" FileEncode Settings
"==========================================
set encoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1


"--------
" Vim UI
"--------
set background=dark
colors kcli


"--------
" search
"--------
set incsearch
set ignorecase
set smartcase
set hlsearch


"-----------------
" editor settings
"-----------------
set history=1000
set nocompatible
set nofoldenable " disable folding"
set backspace=indent,eol,start " More powerful backspacing
set t_Co=256 " Explicitly tell vim that the terminal has 256 colors "
set mouse=a " use mouse in all modes
set report=0 " always report number of lines changed "
set nowrap " dont wrap lines
set scrolloff=5 " 5 lines above/below cursor when scrolling
set number " show line numbers
set showmatch " show matching bracket (briefly jump)
set showcmd " show typed command in status bar
set title " show file in titlebar
set laststatus=2 " use 2 lines for the status bar
set matchtime=2 " show matching bracket for 0.2 seconds
set matchpairs+=<:> " specially for html

"---------------------
" Default Indentation
"---------------------
set autoindent
set smartindent " indent when
set expandtab " expand tab to space
set smarttab
set tabstop=4 " tab width
set softtabstop=4 " backspace
set shiftwidth=4 " indent width

set colorcolumn=80

autocmd FileType c,go,java,sh setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab smarttab textwidth=79
autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 textwidth=120
autocmd FileType rust setlocal tabstop=4 softtabstop=4 shiftwidth=4 textwidth=99


"-----------------
" Plugin settings
"-----------------

" Rainbow parentheses for Lisp and variants
let g:rbpt_colorpairs = [
    \ ['brown', 'RoyalBlue3'],
    \ ['Darkblue', 'SeaGreen3'],
    \ ['darkgray', 'DarkOrchid3'],
    \ ['darkgreen', 'firebrick3'],
    \ ['darkcyan', 'RoyalBlue3'],
    \ ['darkred', 'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown', 'firebrick3'],
    \ ['gray', 'RoyalBlue3'],
    \ ['black', 'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue', 'firebrick3'],
    \ ['darkgreen', 'RoyalBlue3'],
    \ ['darkcyan', 'SeaGreen3'],
    \ ['darkred', 'DarkOrchid3'],
    \ ['red', 'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

if &bg == "dark"
  highlight SignColor ctermfg=white ctermbg=blue guifg=white guibg=RoyalBlue3
else
  highlight SignColor ctermbg=white ctermfg=blue guibg=yellow guifg=RoyalBlue3
endif

" auto-pairs
" let g:AutoPairsMapCh=0

" Tagbar
let g:tagbar_left=1
let g:tagbar_width=30
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_foldlevel = 2

" Nerd Tree
let NERDChristmasTree=0
let NERDTreeWinSize=30
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
" let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\~$']
let NERDTreeShowBookmarks=1
let NERDTreeWinPos="right"

" NeadTree-Tabs
let g:nerdtree_tabs_open_on_gui_startup=0
let g:nerdtree_tabs_open_on_console_startup=0

" Nerd git
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

" nerdcommenter
let NERDSpaceDelims=1
let NERDCompactSexyComs=1
let NERDShutUp=1

" airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_alt_sep = '|'
nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>

set hidden "in order to switch between buffers with unsaved change
map ,h :bp<cr>
map ,l :bn<cr>
map ,bd :bd<cr>

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"


" Bbye
nnoremap bd :Bd<CR>

" UltiSnips
let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger = '<C-\>'
let g:UltiSnipsListSnippets = '<C-Tab>'
" let g:UltiSnipsJumpForwardTrigger = '<Tab>'
" let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
let g:UltiSnipsEditSplit="vertical"

" --- ctrlp
set wildignore+=*/tmp/*,*.so,*.o,*.a,*.obj,*.swp,*.zip,*.pyc,*.pyo
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|.rvm$'
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
noremap <C-W><C-U> :CtrlPMRU<CR>
nnoremap <C-W>u :CtrlPMRU<CR>
noremap <C-U> :CtrlPBuffer<CR>

" --- easy-motion
let g:EasyMotion_leader_key = '<Leader>'
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade Comment

""""""""""""""""""""""""""""""
" indent line setting
""""""""""""""""""""""""""""""
let g:indentLine_enabled = 0
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#A4E57E'


" Keybindings for plugin toggle
nmap <F3> :GundoToggle<cr>
nmap <F4> :IndentGuidesToggle<cr>
nmap <F6> :NERDTreeToggle<CR>
nmap <F7> :TagbarToggle<cr>
nmap <F8> :SyntasticToggleMode<cr>
nmap wm :NERDTreeToggle<CR>
noremap <buffer> <F9> :call Flake8()<CR>


" --- Lua
let g:loaded_luainspect = 0
let g:lua_inspect_warnings = 0

" --- Syntastic
let g:syntastic_check_on_open = 1
let g:syntastic_cpp_include_dirs = ['/usr/include/', '/usr/local/include']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler = 'clang'
let g:syntastic_cpp_compiler_options = '-std=gnu99'
let g:syntastic_python_checkers=['pep8', 'pyflakes']
let g:syntastic_python_pep8_args='--ignore=E501,E225'
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_enable_balloons = 1
nnoremap <Leader>s :call ToggleErrors()<cr>
nnoremap <Leader>sn :lnext<cr>
nnoremap <Leader>sp :lprevious<cr>
" let g:syntastic_ignore_files=[".*\.c$", ".*\.h$", ".*\.cpp", ".*\.hpp"]

" --- YCM
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
let g:ycm_extra_conf_globlist=['~/.vim/*']

let g:ycm_server_python_interpreter = '/usr/bin/python'
let g:ycm_confirm_extra_conf = 0
" let g:ycm_allow_changing_updatetime=0
let g:ycm_key_list_select_completion=['<TAB>']
let g:ycm_key_list_previous_completion=['<S-TAB>']
" let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_collect_identifiers_from_tags_files = 1

" set completeopt-=preview
" let g:ycm_add_preview_to_completeopt = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1

" YouCompleteMe key bindings
nnoremap <silent> <leader>y :YcmDiag<CR>

" YcmCompleter Subcommands
nnoremap <silent> <Leader>yd :YcmCompleter GetDoc<CR>
nnoremap <silent> <Leader>yf :YcmCompleter FixIt<CR>
nnoremap <silent> <Leader>yg :YcmCompleter GoTo<CR>
nnoremap <silent> <Leader>yi :YcmCompleter GoToInclude<CR>
nnoremap <silent> <Leader>yt :YcmCompleter GetType<CR>
map <c-i> :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:ycm_key_invoke_completion = '<C-Space>'
let g:ycm_filetype_blacklist = {
      \ 'vim' : 1,
      \ 'tagbar' : 1,
      \ 'gitcommit' : 1,
      \ 'markdown' : 1,
      \ 'md' : 1,
      \ 'text' : 1,
      \}


" --- Indent Guides
let dent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

"------------------
" USEFUL SHORTCUTS
"------------------

let mapleader=","
let g:mapleader=","

" --- trailing whitespace
nmap <leader><space> :FixWhitespace<cr>

" ,/ turn off search highlighting
nmap <leader>/ :nohl<CR>

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" insert mode shortcut
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>


"-----------------------
" PROGRAMMING SHORTCUTS
"-----------------------

" C/C++ specific settings
autocmd FileType c,cpp,cc  set cindent comments=sr:/*,mb:*,el:*/,:// cino=>s,e0,n0,f0,{0,}0,^-1s,:0,=s,g0,h1s,p2,t0,+2,(2,)20,*30

" ,g generates the header guard
map <leader>g :call IncludeGuard()<CR>
fun! IncludeGuard()
   let basename = substitute(bufname(""), '.*/', '', '')
   let guard = '_' . substitute(toupper(basename), '\.', '_', "H")
   call append(0, "#ifndef " . guard)
   call append(1, "#define " . guard)
   call append( line("$"), "#endif // for #ifndef " . guard)
endfun

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
      \ if ! exists("g:leave_my_cursor_position_alone") |
      \ if line("'\"") > 0 && line ("'\"") <= line("$") |
      \ exe "normal g'\"" |
      \ endif |
      \ endif

" rust specific settings
let g:rustfmt_autosave = 1
" let g:racer_cmd = "~/.cargo/bin/racer"
" let $RUST_SRC_PATH="~/rust/rust/src/"

"------------------
" Useful Functions
"------------------

" w!! to sudo & write a file
cmap w!! w !sudo tee >/dev/null %

" eggcache vim
nnoremap ; :
:command W w
:command WQ wq
:command Wq wq
:command Q q
:command Qa qa
:command QA qa


"----------------
" syntax support
"----------------
au BufRead,BufNewFile *.lds setfiletype ld
au BufRead,BufNewFile *.conkyrc setfiletype lua


"----------------
" polyglot
"----------------
let g:polyglot_disabled = ['nginx']

"
" Bookmarks
nmap <Leader><Leader> <Plug>BookmarkToggle
