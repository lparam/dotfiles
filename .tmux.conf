# cat << EOF > /dev/null
#
# author:    lparam <lparam.i18n@gmail.com>
# modified:  2013 Mar 25
#

#-- base --#
set -g default-terminal "screen-256color"
set -g display-time 3000
set -g history-limit 4096

set -g allow-rename off
setw -g automatic-rename off

setw -g mode-keys vi
set -g status-keys vi

#-- bindkeys --#
set -g prefix ^a
unbind ^b
bind a send-prefix

unbind '"'
unbind %

bind r source-file ~/.tmux.conf \; display-message '~/.tmux.conf reloaded'
bind u send-keys -R \; clear-history

bind p previous-window
bind n next-window

bind-key c new-window -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind H split-window -v -c "#{pane_current_path}"

bind Tab last-window # move to last active window

bind k select-pane -U
bind j select-pane -D
bind h select-pane -L
bind l select-pane -R
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

bind ^k resizep -U 10
bind ^j resizep -D 10
bind ^h resizep -L 10
bind ^l resizep -R 10

bind ^u swapp -U
bind ^d swapp -D

bind ^e last
bind q killp

#-- session --#
bind C-c new-session
bind C-f command-prompt -p find-session 'switch-client -t %%'

#-- display --#
set -g display-panes-active-colour '#00afff'
set -g display-panes-colour '#00afff'

# activity
set -g monitor-activity on
set -g visual-activity off

#-- title --#
set -g set-titles on
set -g set-titles-string "#h ❐ #S ● #I #W"

#-- statusbar --#
set -g status-interval 1
set -q -g status-utf8 on

set -g status-style default
set -g status-left-length 80
set -g status-right-length 80
# set -g status-left " ❐ #S "
# set -g status-right "#[defult]#[fg=red][#[fg=green]%H:%M #[fg=magenta]%a %m-%d #[fg=red]]#[bold] #[fg=green]#(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D)#(cut -c3- ~/.tmux.conf | sh -s _root #{pane_tty} #D) #[bold]#[fg=yellow]@ #[fg=brightblue]#(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D) "
# set -g status-left "#[fg=#000000,bg=#ffff00,bold] ❐ #S #[fg=#ffff00,bg=default,none]\uE0B0 "
# set -g status-right "#[fg=#008080,bg=default,none]\uE0B2#[fg=#8a8a8a,bg=#008080,none] %R \uE0B2#[fg=#008080,bg=#8a8a8a,none] %a %m-%d #[fg=#d70000,bg=#8a8a8a,none]\uE0B2#[fg=#e4e4e4,bg=#d70000,bold] #(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D)#[fg=none]#[bg=none]#[bold,blink]#(cut -c3- ~/.tmux.conf | sh -s _root #{pane_tty} #D)#[default]#[fg=#e4e4e4,bg=#d70000,none] #[fg=#e4e4e4,bg=#d70000,none]\uE0B2#[fg=#000000,bg=#e4e4e4,bold] #(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D) "
set -g status-left "#[fg=colour235,bg=#ffc000,bold] ❐ #(~/bin/session_name.sh "#S") #[fg=#ffc000,bg=#990000,nobold]#[fg=#d7bdbd,bg=#990000,bold]  #(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D)#[fg=none]#[bg=none]#[bold,blink]#(cut -c3- ~/.tmux.conf | sh -s _root #{pane_tty} #D) #[fg=#990000,bg=colour241] #[fg=colour235,bg=colour241,bold]  #(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D) #[fg=colour241,bg=default,nobold]"
set -g status-right "#[fg=colour241,bg=default]#[fg=colour233,bg=colour241,bold] %H:%M #[fg=#0f68ad,bg=colour241]#[fg=colour233,bg=#0f68ad,bold] %-a %m-%d "

#-- panel --#
set -g pane-active-border-style "fg=#00afff,bg=default"
set -g pane-border-style "fg=#444444,bg=default"

#-- windows --#
# set -g window-status-current-format "#[fg=red,bold]#I:#W#{?window_flags,#{window_flags}, }"
# set -g window-status-current-format "#[fg=#080808,bg=#00afff]\uE0B0#[fg=#000000,bg=#00afff,bold] #I #W #[fg=#00afff,bg=default,none]\uE0B0"
# set -g window-status-current-format "#[fg=colour235,bg=colour120]#[fg=colour25,bg=colour120,noreverse,bold] #I #W #[fg=colour120,bg=default,none]"
# set -g window-status-format "#I:#W#{?window_flags,#{window_flags}, }"
set -g window-status-current-format "#[fg=colour235,bg=colour120]#[fg=colour25,bg=colour120,noreverse,bold] #(~/bin/window_name.sh #I "#W" "#S" "1") #[fg=colour120,bg=default,none]"
set -g window-status-format "#(~/bin/window_name.sh "#I" "#W" "#S" "0")"
set -g window-status-current-style fg=brightred,bright
set -g window-status-last-style "fg=#00afff,bg=default,none"
set -g window-status-style "fg=#8a8a8a,none"
set -g window-status-separator " "
set -g renumber-windows off

#-- mouse --#
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# clock
set-window-option -g clock-mode-colour green #green

#-- plugin --#
set -g @tpm_plugins '          \
   tmux-plugins/tpm            \
   tmux-plugins/tmux-sensible  \
   tmux-plugins/tmux-resurrect \
   tmux-plugins/tmux-continuum \
   '

run '~/.tmux/plugins/tpm/tpm'

# EOF

#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed () {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
#

# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \;\
#        display "mouse: $new"
# }

# _is_enabled() {
#   ( ([ x"$1" = x"enabled" ] || [ x"$1" = x"true" ] || [ x"$1" = x"yes" ] || [ x"$1" = x"1" ]) && return 0 ) || return 1
# }

# _tty_info() {
#   tty="${1##/dev/}"
#   uname -s | grep -q "CYGWIN" && cygwin=true
#
#   if [ x"$cygwin" = x"true" ]; then
#     ps -af | tail -n +2 | awk -v tty="$tty" '
#       ((/ssh/ && !/-W/) || !/ssh/) && $4 == tty {
#         user[$2] = $1; parent[$2] = $3; child[$3] = $2
#       }
#       END {
#         for (i in parent)
#         {
#           j = i
#           while (parent[j])
#             j = parent[j]
#
#           if (!(i in child) && j != 1)
#           {
#             file = "/proc/" i "/cmdline"; getline command < file; close(file)
#             gsub(/\0/, " ", command)
#             print i, user[i], command
#             exit
#           }
#         }
#       }
#     '
#   else
#     ps -t "$tty" -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk '
#       NR > 1 && ((/ssh/ && !/-W/) || !/ssh/) {
#         user[$2] = $1; parent[$2] = $3; child[$3] = $2; for (i = 4 ; i <= NF; ++i) command[$2] = i > 4 ? command[$2] FS $i : $i
#       }
#       END {
#         for (i in parent)
#         {
#           j = i
#           while (parent[j])
#             j = parent[j]
#
#           if (!(i in child) && j != 1)
#           {
#             print i, user[i], command[i]
#             exit
#           }
#         }
#       }
#     '
#   fi
# }

# _ssh_or_mosh_args() {
#   args=$(printf '%s' "$1" | awk '/ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { $1=""; print $0; exit }')
#   if [ -z "$args" ]; then
#     args=$(printf '%s' "$1" | grep 'mosh-client' | sed -E -e 's/.*mosh-client -# (.*)\|.*$/\1/' -e 's/-[^ ]*//g' -e 's/\d:\d//g')
#   fi
#
#  printf '%s' "$args"
# }

# _username() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#
#   tty_info=$(_tty_info "$tty")
#   command=$(printf '%s' "$tty_info" | cut -d' ' -f3-)
#
#   ssh_or_mosh_args=$(_ssh_or_mosh_args "$command")
#   if [ -n "$ssh_or_mosh_args" ]; then
#     # shellcheck disable=SC2086
#     username=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk 'NR > 2 { exit } ; /^user / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$username" ] && username=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%username%% %r >&2'" $ssh_or_mosh_args 2>&1 | awk '/^%username% / { print $2; exit }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       username=$(printf '%s' "$tty_info" | cut -d' ' -f2)
#     fi
#   fi
#
#   printf '%s' "$username"
# }

# _hostname() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#
#   tty_info=$(_tty_info "$tty")
#   command=$(printf '%s' "$tty_info" | cut -d' ' -f3-)
#
#   ssh_or_mosh_args=$(_ssh_or_mosh_args "$command")
#   if [ -n "$ssh_or_mosh_args" ]; then
#     # shellcheck disable=SC2086
#     hostname=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk 'NR > 2 { exit } ; /^hostname / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$hostname" ] && hostname=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%hostname%% %h >&2'" $ssh_or_mosh_args 2>&1 | awk '/^%hostname% / { print $2; exit }')
#     #shellcheck disable=SC1004
#     hostname=$(echo "$hostname" | awk '\
#     { \
#       if ($1~/^[0-9.:]+$/) \
#         print $1; \
#       else \
#         split($1, a, ".") ; print a[1] \
#     }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       hostname=$(command hostname -s)
#     fi
#   fi
#
#   printf '%s' "$hostname"
# }

# _root() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   username=$(_username "$tty" false)
#
#   if [ x"$username" = x"root" ]; then
#     tmux show -gqv '@root'
#   else
#     echo ""
#   fi
# }

# "$@"
